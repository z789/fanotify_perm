diff -Nurp linux-3.10.0-1127.13.1.el7.x86_64.orig/fs/notify/fanotify/fanotify.c linux-3.10.0-1127.13.1.el7.x86_64/fs/notify/fanotify/fanotify.c
--- linux-3.10.0-1127.13.1.el7.x86_64.orig/fs/notify/fanotify/fanotify.c	2020-12-07 18:14:16.213499445 +0800
+++ linux-3.10.0-1127.13.1.el7.x86_64/fs/notify/fanotify/fanotify.c	2020-12-07 20:21:37.794784725 +0800
@@ -9,9 +9,18 @@
 #include <linux/types.h>
 #include <linux/wait.h>
 #include <linux/audit.h>
+#include <linux/spinlock.h>
 
 #include "fanotify.h"
 
+#ifdef CONFIG_FANOTIFY_ACCESS_PERMISSIONS
+unsigned long max_time_do_perm;
+DEFINE_SPINLOCK(max_time_lock);
+
+atomic64_t  count_timeout_perm_event = ATOMIC64_INIT(0);;
+extern unsigned long time_wait_response;
+#endif
+
 static bool should_merge(struct fsnotify_event *old_fsn,
 			 struct fsnotify_event *new_fsn)
 {
@@ -153,6 +162,7 @@ struct fanotify_event_info *fanotify_all
 			return NULL;
 		event = &pevent->fae;
 		pevent->response = 0;
+		pevent->start_time = jiffies;
 		goto init;
 	}
 #endif
@@ -192,6 +202,8 @@ static int fanotify_handle_event(struct
 	BUILD_BUG_ON(FAN_OPEN_PERM != FS_OPEN_PERM);
 	BUILD_BUG_ON(FAN_ACCESS_PERM != FS_ACCESS_PERM);
 	BUILD_BUG_ON(FAN_ONDIR != FS_ISDIR);
+	BUILD_BUG_ON(FAN_OPEN_EXEC != FS_OPEN_EXEC);
+	BUILD_BUG_ON(FAN_OPEN_EXEC_PERM != FS_OPEN_EXEC_PERM);
 
 	if (!fanotify_should_send_event(iter_info, mask, data, data_type))
 		return 0;
@@ -201,6 +213,19 @@ static int fanotify_handle_event(struct
 
 #ifdef CONFIG_FANOTIFY_ACCESS_PERMISSIONS
 	if (mask & FAN_ALL_PERM_EVENTS) {
+		spin_lock(&group->notification_lock);
+		if (read_count_perm_event(group) > 0
+		    && time_after_eq(jiffies, group->fanotify_data.time_last_response + time_wait_response)){ 
+			atomic64_inc(&count_timeout_perm_event);
+			spin_unlock(&group->notification_lock);
+			return 0;
+		}
+		spin_unlock(&group->notification_lock);
+	}
+#endif
+
+#ifdef CONFIG_FANOTIFY_ACCESS_PERMISSIONS
+	if (mask & FAN_ALL_PERM_EVENTS) {
 		/*
 		 * fsnotify_prepare_user_wait() fails if we race with mark
 		 * deletion.  Just let the operation pass in that case.
@@ -260,8 +285,14 @@ static void fanotify_free_event(struct f
 	put_pid(event->tgid);
 #ifdef CONFIG_FANOTIFY_ACCESS_PERMISSIONS
 	if (fsn_event->mask & FAN_ALL_PERM_EVENTS) {
-		kmem_cache_free(fanotify_perm_event_cachep,
-				FANOTIFY_PE(fsn_event));
+		struct fanotify_perm_event_info *pevent = FANOTIFY_PE(fsn_event);
+		unsigned long cost = jiffies_to_usecs(jiffies - pevent->start_time);
+		spin_lock(&max_time_lock);
+		if (cost > max_time_do_perm)
+			max_time_do_perm = cost;
+		spin_unlock(&max_time_lock);
+
+		kmem_cache_free(fanotify_perm_event_cachep, pevent);
 		return;
 	}
 #endif
diff -Nurp linux-3.10.0-1127.13.1.el7.x86_64.orig/fs/notify/fanotify/fanotify.h linux-3.10.0-1127.13.1.el7.x86_64/fs/notify/fanotify/fanotify.h
--- linux-3.10.0-1127.13.1.el7.x86_64.orig/fs/notify/fanotify/fanotify.h	2020-12-07 18:14:16.213499445 +0800
+++ linux-3.10.0-1127.13.1.el7.x86_64/fs/notify/fanotify/fanotify.h	2020-12-07 20:10:19.001851764 +0800
@@ -25,12 +25,11 @@ struct fanotify_event_info {
 /*
  * Structure for permission fanotify events. It gets allocated and freed in
  * fanotify_handle_event() since we wait there for user response. When the
- * information is retrieved by userspace the structure is moved from
- * group->notification_list to group->fanotify_data.access_list to wait for
  * user response.
  */
 struct fanotify_perm_event_info {
 	struct fanotify_event_info fae;
+	unsigned long start_time;
 	int response;	/* userspace answer to question */
 	int fd;		/* fd we passed to userspace for this event */
 };
@@ -40,6 +39,24 @@ FANOTIFY_PE(struct fsnotify_event *fse)
 {
 	return container_of(fse, struct fanotify_perm_event_info, fae.fse);
 }
+
+static inline void inc_count_perm_event(struct fsnotify_group *group)
+{
+	atomic64_inc(&group->fanotify_data.count_perm_event);
+	BUG_ON(atomic64_read(&group->fanotify_data.count_perm_event) < 0);
+}
+
+static inline void dec_count_perm_event(struct fsnotify_group *group)
+{
+	atomic64_dec(&group->fanotify_data.count_perm_event);
+	BUG_ON(atomic64_read(&group->fanotify_data.count_perm_event) < 0);
+}
+
+static inline s64 read_count_perm_event(struct fsnotify_group *group)
+{
+	BUG_ON(atomic64_read(&group->fanotify_data.count_perm_event) < 0);
+	return atomic64_read(&group->fanotify_data.count_perm_event);
+}
 #endif
 
 static inline struct fanotify_event_info *FANOTIFY_E(struct fsnotify_event *fse)
diff -Nurp linux-3.10.0-1127.13.1.el7.x86_64.orig/fs/notify/fanotify/fanotify_user.c linux-3.10.0-1127.13.1.el7.x86_64/fs/notify/fanotify/fanotify_user.c
--- linux-3.10.0-1127.13.1.el7.x86_64.orig/fs/notify/fanotify/fanotify_user.c	2020-12-07 18:14:16.213499445 +0800
+++ linux-3.10.0-1127.13.1.el7.x86_64/fs/notify/fanotify/fanotify_user.c	2020-12-07 18:39:42.828030714 +0800
@@ -14,6 +14,7 @@
 #include <linux/types.h>
 #include <linux/uaccess.h>
 #include <linux/compat.h>
+#include <linux/timer.h>
 
 #include <asm/ioctls.h>
 
@@ -44,6 +45,96 @@ struct kmem_cache *fanotify_mark_cache _
 struct kmem_cache *fanotify_event_cachep __read_mostly;
 struct kmem_cache *fanotify_perm_event_cachep __read_mostly;
 
+#ifdef CONFIG_FANOTIFY_ACCESS_PERMISSIONS
+unsigned long time_wait_response = 10;
+static unsigned long min_time_wait_response = 0;
+static unsigned long max_time_wait_response = HZ*5;
+
+static unsigned long interval_timer   = 10; 
+static unsigned long min_interval_timer   = 1; 
+static unsigned long max_interval_timer   = HZ*5; 
+
+static int response_timeout = FAN_ALLOW;
+static int min_response_timeout = FAN_ALLOW;
+static int max_response_timeout = FAN_DENY;
+
+extern unsigned long max_time_do_perm;
+
+extern atomic64_t count_timeout_perm_event;
+static int proc_count_timeout_perm_event(struct ctl_table *ctl, int write,
+			   void __user *buffer, size_t *lenp,
+			   loff_t *ppos);
+
+#ifdef CONFIG_SYSCTL
+#include <linux/sysctl.h>
+struct ctl_table fanotify_table[] = {
+	{
+		.procname	= "max_time_do_perm",
+		.data		= &max_time_do_perm,
+		.maxlen		= sizeof(max_time_do_perm),
+		.mode		= 0444,
+		.proc_handler	= proc_doulongvec_minmax,
+	},
+	{
+		.procname	= "count_timeout_perm_event",
+		.data		= &count_timeout_perm_event,
+		.maxlen		= sizeof(count_timeout_perm_event),
+		.mode		= 0644,
+		.proc_handler	= proc_count_timeout_perm_event,
+	},
+	{
+		.procname	= "time_wait_response",
+		.data		= &time_wait_response,
+		.maxlen		= sizeof(time_wait_response),
+		.mode		= 0644,
+		.proc_handler	= proc_doulongvec_ms_jiffies_minmax,
+		.extra1         = &min_time_wait_response,
+		.extra2         = &max_time_wait_response,
+	},
+	{
+		.procname	= "interval_timer",
+		.data		= &interval_timer,
+		.maxlen		= sizeof(interval_timer),
+		.mode		= 0644,
+		.proc_handler	= proc_doulongvec_ms_jiffies_minmax,
+		.extra1         = &min_interval_timer,
+		.extra2         = &max_interval_timer,
+	},
+	{
+		.procname	= "response_timeout",
+		.data		= &response_timeout,
+		.maxlen		= sizeof(response_timeout),
+		.mode		= 0644,
+		.proc_handler	= proc_douintvec_minmax,
+		.extra1         = &min_response_timeout,
+		.extra2         = &max_response_timeout,
+	},
+	{ }
+};
+
+
+static int proc_count_timeout_perm_event(struct ctl_table *ctl, int write,
+			   void __user *buffer, size_t *lenp,
+			   loff_t *ppos)
+{
+	unsigned long  count = atomic64_read(&count_timeout_perm_event);
+	int ret = 0;
+
+	struct ctl_table tmp = {
+		.data = &count,
+		.maxlen = sizeof(count),
+		.mode = ctl->mode,
+	};
+
+	ret = proc_doulongvec_minmax(&tmp, write, buffer, lenp, ppos); 
+	if (write && count == 0)        //only clear count_timeout_perm_event
+		atomic64_set(&count_timeout_perm_event, count);
+
+	return ret;
+}
+#endif /* CONFIG_SYSCTL */
+#endif /* CONFIG_FANOTIFY_ACCESS_PERMISSIONS */
+
 /*
  * Get an fsnotify notification event if one exists and is small
  * enough to fit in "count". Return an error pointer if the count
@@ -154,9 +245,11 @@ static struct fanotify_perm_event_info *
 			continue;
 
 		list_del_init(&event->fae.fse.list);
+		dec_count_perm_event(group);
 		return_e = event;
 		break;
 	}
+	group->fanotify_data.time_last_response = jiffies;
 	spin_unlock(&group->notification_lock);
 
 	pr_debug("%s: found return_re=%p\n", __func__, return_e);
@@ -273,6 +366,8 @@ static ssize_t fanotify_read(struct file
 	while (1) {
 		spin_lock(&group->notification_lock);
 		kevent = get_one_event(group, count);
+		if (kevent && !IS_ERR(kevent) && (kevent->mask & FAN_ALL_PERM_EVENTS)) 
+			dec_count_perm_event(group);
 		spin_unlock(&group->notification_lock);
 
 		if (IS_ERR(kevent)) {
@@ -315,13 +410,18 @@ static ssize_t fanotify_read(struct file
 			fsnotify_destroy_event(group, kevent);
 		} else {
 #ifdef CONFIG_FANOTIFY_ACCESS_PERMISSIONS
+			struct fanotify_perm_event_info * fpe = FANOTIFY_PE(kevent);
 			if (ret <= 0) {
-				FANOTIFY_PE(kevent)->response = FAN_DENY;
+				fpe->response = FAN_DENY;
+				wake_up(&group->fanotify_data.access_waitq);
+			} else if (time_after_eq(jiffies, fpe->start_time + time_wait_response)) {
+				fpe->response = response_timeout;
 				wake_up(&group->fanotify_data.access_waitq);
 			} else {
 				spin_lock(&group->notification_lock);
 				list_add_tail(&kevent->list,
 					&group->fanotify_data.access_list);
+				inc_count_perm_event(group);
 				spin_unlock(&group->notification_lock);
 			}
 #endif
@@ -373,6 +473,7 @@ static int fanotify_release(struct inode
 	struct fanotify_perm_event_info *event, *next;
 	struct fsnotify_event *fsn_event;
 
+	del_timer_sync(&group->fanotify_data.timer_response_perm);
 	/*
 	 * Stop new events from arriving in the notification queue. since
 	 * userspace cannot use fanotify fd anymore, no event can enter or
@@ -712,6 +813,63 @@ static int fanotify_add_inode_mark(struc
 	return 0;
 }
 
+#ifdef CONFIG_FANOTIFY_ACCESS_PERMISSIONS
+static void fanotify_response_timeout_work(struct work_struct *work)
+{
+	struct fanotify_group_private_data *fanotify_data = 
+                              container_of(work, struct fanotify_group_private_data, work);
+	struct fsnotify_group *group = container_of(fanotify_data, struct fsnotify_group, fanotify_data);
+	struct fanotify_perm_event_info *event, *next;
+	struct fsnotify_event *fsn_event, *fsn_next;
+
+	/*
+	 * Process all permission events on access_list and notification queue
+	 * and simulate reply from userspace.
+	 */
+	spin_lock(&group->notification_lock);
+	list_for_each_entry_safe(event, next, &group->fanotify_data.access_list,
+				 fae.fse.list) {
+		if (time_after(jiffies, event->start_time + time_wait_response)) {
+			list_del_init(&event->fae.fse.list);
+			event->response = response_timeout;
+			dec_count_perm_event(group);
+			atomic64_inc(&count_timeout_perm_event);
+		}
+	}
+
+	list_for_each_entry_safe(fsn_event, fsn_next, &group->notification_list,
+				 list) {
+		if ((fsn_event->mask & FAN_ALL_PERM_EVENTS)) {
+			event = FANOTIFY_PE(fsn_event);
+			if (time_after(jiffies, event->start_time + time_wait_response)) {
+				list_del_init(&event->fae.fse.list);
+				event->response = response_timeout;
+				group->q_len--;
+				dec_count_perm_event(group);
+				atomic64_inc(&count_timeout_perm_event);
+			}
+		}
+	}
+
+	spin_unlock(&group->notification_lock);
+	wake_up(&group->fanotify_data.access_waitq);
+}
+
+static void fanotify_response_timeout_timer(struct timer_list *t)
+{
+	struct fanotify_group_private_data *fanotify_data = NULL;
+	struct fsnotify_group *group = NULL;
+
+	fanotify_data = from_timer(fanotify_data, t, timer_response_perm);	
+	group = container_of(fanotify_data, struct fsnotify_group, fanotify_data);
+	if (read_count_perm_event(group) > 0)
+		queue_work(system_unbound_wq, &fanotify_data->work);
+
+	mod_timer(&fanotify_data->timer_response_perm, 
+			jiffies + interval_timer);
+}
+#endif
+
 /* fanotify syscalls */
 SYSCALL_DEFINE2(fanotify_init, unsigned int, flags, unsigned int, event_f_flags)
 {
@@ -825,6 +983,14 @@ SYSCALL_DEFINE2(fanotify_init, unsigned
 	if (fd < 0)
 		goto out_destroy_group;
 
+#ifdef CONFIG_FANOTIFY_ACCESS_PERMISSIONS
+	atomic64_set(&group->fanotify_data.count_perm_event, 0);
+	group->fanotify_data.time_last_response = jiffies;
+	INIT_WORK(&group->fanotify_data.work, fanotify_response_timeout_work);  
+	timer_setup(&group->fanotify_data.timer_response_perm, fanotify_response_timeout_timer, 0);
+	mod_timer(&group->fanotify_data.timer_response_perm, 
+			jiffies + interval_timer);
+#endif
 	return fd;
 
 out_destroy_group:
diff -Nurp linux-3.10.0-1127.13.1.el7.x86_64.orig/fs/notify/fsnotify.c linux-3.10.0-1127.13.1.el7.x86_64/fs/notify/fsnotify.c
--- linux-3.10.0-1127.13.1.el7.x86_64.orig/fs/notify/fsnotify.c	2020-12-07 18:14:16.211499423 +0800
+++ linux-3.10.0-1127.13.1.el7.x86_64/fs/notify/fsnotify.c	2020-12-07 18:15:04.944054224 +0800
@@ -393,7 +393,7 @@ static __init int fsnotify_init(void)
 {
 	int ret;
 
-	BUG_ON(hweight32(ALL_FSNOTIFY_EVENTS) != 23);
+	BUG_ON(hweight32(ALL_FSNOTIFY_EVENTS) != 25);
 
 	ret = init_srcu_struct(&fsnotify_mark_srcu);
 	if (ret)
diff -Nurp linux-3.10.0-1127.13.1.el7.x86_64.orig/fs/notify/notification.c linux-3.10.0-1127.13.1.el7.x86_64/fs/notify/notification.c
--- linux-3.10.0-1127.13.1.el7.x86_64.orig/fs/notify/notification.c	2020-12-07 18:14:16.211499423 +0800
+++ linux-3.10.0-1127.13.1.el7.x86_64/fs/notify/notification.c	2020-12-07 18:45:59.460939454 +0800
@@ -46,7 +46,9 @@
 #include <linux/atomic.h>
 
 #include <linux/fsnotify_backend.h>
+#include <linux/fanotify.h>
 #include "fsnotify.h"
+#include "fanotify/fanotify.h"
 
 static atomic_t fsnotify_sync_cookie = ATOMIC_INIT(0);
 
@@ -133,6 +135,11 @@ int fsnotify_add_event(struct fsnotify_g
 queue:
 	group->q_len++;
 	list_add_tail(&event->list, list);
+
+#ifdef CONFIG_FANOTIFY_ACCESS_PERMISSIONS
+	if (event->mask & FAN_ALL_PERM_EVENTS) 
+		inc_count_perm_event(group);
+#endif
 	spin_unlock(&group->notification_lock);
 
 	wake_up(&group->notification_waitq);
diff -Nurp linux-3.10.0-1127.13.1.el7.x86_64.orig/include/linux/fanotify.h linux-3.10.0-1127.13.1.el7.x86_64/include/linux/fanotify.h
--- linux-3.10.0-1127.13.1.el7.x86_64.orig/include/linux/fanotify.h	2020-12-07 18:14:13.676470562 +0800
+++ linux-3.10.0-1127.13.1.el7.x86_64/include/linux/fanotify.h	2020-12-07 18:15:04.945054235 +0800
@@ -2,7 +2,10 @@
 #define _LINUX_FANOTIFY_H
 
 #include <uapi/linux/fanotify.h>
+#include <linux/sysctl.h>
 
 /* not valid from userspace, only kernel internal */
 #define FAN_MARK_ONDIR		0x00000100
+
+extern struct ctl_table fanotify_table[]; /* for sysctl */
 #endif /* _LINUX_FANOTIFY_H */
diff -Nurp linux-3.10.0-1127.13.1.el7.x86_64.orig/include/linux/fsnotify_backend.h linux-3.10.0-1127.13.1.el7.x86_64/include/linux/fsnotify_backend.h
--- linux-3.10.0-1127.13.1.el7.x86_64.orig/include/linux/fsnotify_backend.h	2020-12-07 18:14:13.624469970 +0800
+++ linux-3.10.0-1127.13.1.el7.x86_64/include/linux/fsnotify_backend.h	2020-12-07 20:45:13.892250321 +0800
@@ -16,6 +16,7 @@
 #include <linux/spinlock.h>
 #include <linux/types.h>
 #include <linux/atomic.h>
+#include <linux/workqueue.h>
 
 /*
  * IN_* from inotfy.h lines up EXACTLY with FS_*, this is so we can easily
@@ -35,6 +36,7 @@
 #define FS_DELETE		0x00000200	/* Subfile was deleted */
 #define FS_DELETE_SELF		0x00000400	/* Self was deleted */
 #define FS_MOVE_SELF		0x00000800	/* Self was moved */
+#define FS_OPEN_EXEC		0x00001000      /* File was opened for exec */
 
 #define FS_UNMOUNT		0x00002000	/* inode on umount fs */
 #define FS_Q_OVERFLOW		0x00004000	/* Event queued overflowed */
@@ -42,6 +44,7 @@
 
 #define FS_OPEN_PERM		0x00010000	/* open event in an permission hook */
 #define FS_ACCESS_PERM		0x00020000	/* access event in a permissions hook */
+#define FS_OPEN_EXEC_PERM	0x00040000	/* open/exec event in a permission hook */
 
 #define FS_EXCL_UNLINK		0x04000000	/* do not send events if object is unlinked */
 #define FS_ISDIR		0x40000000	/* event occurred against dir */
@@ -59,11 +62,12 @@
 #define FS_EVENTS_POSS_ON_CHILD   (FS_ACCESS | FS_MODIFY | FS_ATTRIB |\
 				   FS_CLOSE_WRITE | FS_CLOSE_NOWRITE | FS_OPEN |\
 				   FS_MOVED_FROM | FS_MOVED_TO | FS_CREATE |\
-				   FS_DELETE | FS_OPEN_PERM | FS_ACCESS_PERM)
+				   FS_DELETE | FS_OPEN_PERM | FS_ACCESS_PERM |\
+				   FS_OPEN_EXEC | FS_OPEN_EXEC_PERM)
 
 #define FS_MOVE			(FS_MOVED_FROM | FS_MOVED_TO)
 
-#define ALL_FSNOTIFY_PERM_EVENTS (FS_OPEN_PERM | FS_ACCESS_PERM)
+#define ALL_FSNOTIFY_PERM_EVENTS (FS_OPEN_PERM | FS_ACCESS_PERM | FS_OPEN_EXEC_PERM)
 
 #define ALL_FSNOTIFY_EVENTS (FS_ACCESS | FS_MODIFY | FS_ATTRIB | \
 			     FS_CLOSE_WRITE | FS_CLOSE_NOWRITE | FS_OPEN | \
@@ -72,7 +76,8 @@
 			     FS_UNMOUNT | FS_Q_OVERFLOW | FS_IN_IGNORED | \
 			     FS_OPEN_PERM | FS_ACCESS_PERM | FS_EXCL_UNLINK | \
 			     FS_ISDIR | FS_IN_ONESHOT | FS_DN_RENAME | \
-			     FS_DN_MULTISHOT | FS_EVENT_ON_CHILD)
+			     FS_DN_MULTISHOT | FS_EVENT_ON_CHILD |\
+			     FS_OPEN_EXEC | FS_OPEN_EXEC_PERM)
 
 struct fsnotify_group;
 struct fsnotify_event;
@@ -183,6 +188,12 @@ struct fsnotify_group {
 			/* allows a group to block waiting for a userspace response */
 			struct list_head access_list;
 			wait_queue_head_t access_waitq;
+
+			unsigned long time_last_response;        /* time last response */
+			struct timer_list  timer_response_perm;  /* timer */
+			struct work_struct work;                 /* process timeout response */
+			atomic64_t count_perm_event;    /* number of perm event in
+                                                           access_list and notification_list */ 
 #endif /* CONFIG_FANOTIFY_ACCESS_PERMISSIONS */
 			int f_flags;
 			unsigned int max_marks;
diff -Nurp linux-3.10.0-1127.13.1.el7.x86_64.orig/include/linux/fsnotify.h linux-3.10.0-1127.13.1.el7.x86_64/include/linux/fsnotify.h
--- linux-3.10.0-1127.13.1.el7.x86_64.orig/include/linux/fsnotify.h	2020-12-07 18:14:13.663470414 +0800
+++ linux-3.10.0-1127.13.1.el7.x86_64/include/linux/fsnotify.h	2020-12-07 18:15:04.946054247 +0800
@@ -25,6 +25,20 @@ static inline int fsnotify_parent(const
 	return __fsnotify_parent(path, dentry, mask);
 }
 
+/*
+ * Simple wrapper to consolidate calls fsnotify_parent()/fsnotify() when
+ * an event is on a path.
+ */
+static inline int fsnotify_path(struct inode *inode, const struct path *path,
+                                __u32 mask)
+{
+        int ret = fsnotify_parent(path, NULL, mask);
+
+        if (ret)
+                return ret;
+        return fsnotify(inode, mask, path, FSNOTIFY_EVENT_PATH, NULL, 0);
+}
+
 /* simple call site for access decisions */
 static inline int fsnotify_perm(struct file *file, int mask)
 {
@@ -41,12 +55,16 @@ static inline int fsnotify_perm(struct f
 		return 0;
 	if (!(mask & (MAY_READ | MAY_OPEN)))
 		return 0;
-	if (mask & MAY_OPEN)
+	if (mask & MAY_OPEN) {
 		fsnotify_mask = FS_OPEN_PERM;
-	else if (mask & MAY_READ)
+		if (file->f_flags & __FMODE_EXEC) {
+			ret = fsnotify_path(inode, path, FS_OPEN_EXEC_PERM);
+			if (ret)
+				return ret;
+		}
+	} else if (mask & MAY_READ) {
 		fsnotify_mask = FS_ACCESS_PERM;
-	else
-		BUG();
+	}
 
 	ret = fsnotify_parent(path, NULL, fsnotify_mask);
 	if (ret)
@@ -218,6 +236,8 @@ static inline void fsnotify_open(struct
 
 	if (S_ISDIR(inode->i_mode))
 		mask |= FS_ISDIR;
+	if (file->f_flags & __FMODE_EXEC)
+		mask |= FS_OPEN_EXEC;
 
 	fsnotify_parent(path, NULL, mask);
 	fsnotify(inode, mask, path, FSNOTIFY_EVENT_PATH, NULL, 0);
diff -Nurp linux-3.10.0-1127.13.1.el7.x86_64.orig/include/uapi/linux/fanotify.h linux-3.10.0-1127.13.1.el7.x86_64/include/uapi/linux/fanotify.h
--- linux-3.10.0-1127.13.1.el7.x86_64.orig/include/uapi/linux/fanotify.h	2020-12-07 18:14:13.482468354 +0800
+++ linux-3.10.0-1127.13.1.el7.x86_64/include/uapi/linux/fanotify.h	2020-12-07 18:15:04.946054247 +0800
@@ -9,11 +9,13 @@
 #define FAN_CLOSE_WRITE		0x00000008	/* Writtable file closed */
 #define FAN_CLOSE_NOWRITE	0x00000010	/* Unwrittable file closed */
 #define FAN_OPEN		0x00000020	/* File was opened */
+#define FAN_OPEN_EXEC		0x00001000      /* File was opened for exec */
 
 #define FAN_Q_OVERFLOW		0x00004000	/* Event queued overflowed */
 
 #define FAN_OPEN_PERM		0x00010000	/* File open in perm check */
 #define FAN_ACCESS_PERM		0x00020000	/* File accessed in perm check */
+#define FAN_OPEN_EXEC_PERM	0x00040000	/* File open/exec in perm check */
 
 #define FAN_ONDIR		0x40000000	/* event occurred against dir */
 
@@ -68,13 +70,15 @@
 #define FAN_ALL_EVENTS (FAN_ACCESS |\
 			FAN_MODIFY |\
 			FAN_CLOSE |\
-			FAN_OPEN)
+			FAN_OPEN |\
+			FAN_OPEN_EXEC)
 
 /*
  * All events which require a permission response from userspace
  */
 #define FAN_ALL_PERM_EVENTS (FAN_OPEN_PERM |\
-			     FAN_ACCESS_PERM)
+			     FAN_ACCESS_PERM |\
+			     FAN_OPEN_EXEC_PERM)
 
 #define FAN_ALL_OUTGOING_EVENTS	(FAN_ALL_EVENTS |\
 				 FAN_ALL_PERM_EVENTS |\
diff -Nurp linux-3.10.0-1127.13.1.el7.x86_64.orig/kernel/sysctl.c linux-3.10.0-1127.13.1.el7.x86_64/kernel/sysctl.c
--- linux-3.10.0-1127.13.1.el7.x86_64.orig/kernel/sysctl.c	2020-12-07 18:14:16.120498387 +0800
+++ linux-3.10.0-1127.13.1.el7.x86_64/kernel/sysctl.c	2020-12-07 18:15:04.947054258 +0800
@@ -156,6 +156,9 @@ static unsigned long hung_task_timeout_m
 #ifdef CONFIG_INOTIFY_USER
 #include <linux/inotify.h>
 #endif
+#ifdef CONFIG_FANOTIFY_ACCESS_PERMISSIONS 
+#include <linux/fanotify.h>
+#endif
 #ifdef CONFIG_SPARC
 #endif
 
@@ -1731,6 +1734,13 @@ static struct ctl_table fs_table[] = {
 		.child		= inotify_table,
 	},
 #endif	
+#ifdef CONFIG_FANOTIFY_ACCESS_PERMISSIONS 
+	{
+		.procname	= "fanotify",
+		.mode		= 0555,
+		.child		= fanotify_table,
+	},
+#endif	
 #ifdef CONFIG_EPOLL
 	{
 		.procname	= "epoll",
